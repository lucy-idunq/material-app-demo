[{"D:\\Lucy\\web\\material-app\\src\\index.js":"1","D:\\Lucy\\web\\material-app\\src\\reportWebVitals.js":"2","D:\\Lucy\\web\\material-app\\src\\App.js":"3","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Header.js":"4","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\PageHeader.js":"5","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Pages\\Employees\\EmployeeForm.js":"6","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Pages\\Employees\\Employee.js":"7","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\SideMenu.js":"8","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Pages\\Employees\\useForm.js":"9","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Input.js":"10","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Controls.js":"11","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\RadioGroup.js":"12","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Select.js":"13","D:\\Lucy\\web\\material-app\\src\\Test1\\Services\\employeeService.js":"14","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Checkbox.js":"15","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\DatePicker.js":"16","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Button.js":"17","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\useTable.js":"18","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Popup.js":"19","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\ActionButton.js":"20","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Notification.js":"21","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\ConfirmDialog.js":"22"},{"size":517,"mtime":1609037472040,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":1184,"mtime":1609216816745,"results":"26","hashOfConfig":"24"},{"size":2309,"mtime":1609037472038,"results":"27","hashOfConfig":"24"},{"size":1464,"mtime":1609037472039,"results":"28","hashOfConfig":"24"},{"size":5008,"mtime":1609155518901,"results":"29","hashOfConfig":"24"},{"size":7235,"mtime":1609214131989,"results":"30","hashOfConfig":"24"},{"size":507,"mtime":1609037472040,"results":"31","hashOfConfig":"24"},{"size":1236,"mtime":1609132475701,"results":"32","hashOfConfig":"24"},{"size":536,"mtime":1609150018395,"results":"33","hashOfConfig":"24"},{"size":482,"mtime":1609153680881,"results":"34","hashOfConfig":"24"},{"size":837,"mtime":1609052489903,"results":"35","hashOfConfig":"24"},{"size":1048,"mtime":1609130878762,"results":"36","hashOfConfig":"24"},{"size":1762,"mtime":1609211899070,"results":"37","hashOfConfig":"24"},{"size":729,"mtime":1609057253140,"results":"38","hashOfConfig":"24"},{"size":796,"mtime":1609126220826,"results":"39","hashOfConfig":"24"},{"size":731,"mtime":1609127117584,"results":"40","hashOfConfig":"24"},{"size":4062,"mtime":1609150899862,"results":"41","hashOfConfig":"24"},{"size":1444,"mtime":1609153998623,"results":"42","hashOfConfig":"24"},{"size":884,"mtime":1609153692473,"results":"43","hashOfConfig":"24"},{"size":1015,"mtime":1609211649447,"results":"44","hashOfConfig":"24"},{"size":2295,"mtime":1609214189212,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"hv9mb5",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"D:\\Lucy\\web\\material-app\\src\\index.js",[],["96","97"],"D:\\Lucy\\web\\material-app\\src\\reportWebVitals.js",[],"D:\\Lucy\\web\\material-app\\src\\App.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Header.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\PageHeader.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Pages\\Employees\\EmployeeForm.js",["98","99"],"import React, { useEffect } from 'react'\r\nimport { Grid } from '@material-ui/core';\r\nimport { useForm, Form } from './useForm';\r\nimport Controls from '../../controls/Controls'\r\nimport * as employeeService from '../../../Services/employeeService'\r\n\r\nconst genderItems = [\r\n    { id: 'male', title: 'Male' },\r\n    { id: 'female', title: 'Feale' },\r\n    { id: 'other', title: 'other' },\r\n]\r\n\r\nconst initialFValues = {\r\n    id: 0,\r\n    fullName: '',\r\n    email: '',\r\n    mobile: '',\r\n    city: '',\r\n    gender: 'male',\r\n    departmentId: '',\r\n    hireDate: new Date(),\r\n    isPermanent: false\r\n}\r\n\r\nconst EmployeeForm = props => {\r\n\r\n    const { addOrEdit, recordForEdit } = props\r\n\r\n    useEffect(() => { \r\n        if(recordForEdit !== null)\r\n        setValues({\r\n            ...recordForEdit\r\n        })\r\n    }, recordForEdit)\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if ('fullName' in fieldValues)\r\n            temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\"\r\n        if ('email' in fieldValues)\r\n            temp.email = (/$^|.+@..+/).test(fieldValues.email) ? \"\" : \"Email is not valid\"\r\n        if ('mobile' in fieldValues)\r\n            temp.mobile = fieldValues.mobile.length > 9 ? \"\" : \"Minimun 10 numbers required\"\r\n        if ('departmentId' in fieldValues)\r\n            temp.departmentId = fieldValues.departmentId.length !== 0 ? \"\" : \"This field is required.\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n        if (fieldValues === values)\r\n            return Object.values(temp).every(x => x === \"\")\r\n    }\r\n\r\n    const { values, setValues,\r\n        errors, setErrors,\r\n        handleInputChage, resetForm } = useForm(initialFValues, true, validate)\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (validate())\r\n            // old   employeeService.insertEmployee(values)  resetForm();\r\n            addOrEdit(values, resetForm)\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Grid container>\r\n                <Grid item xs={6}>\r\n                    <Controls.Input name=\"fullName\"\r\n                        label=\"Full Name\"\r\n                        value={values.fullName}\r\n                        onChange={handleInputChage}\r\n                        error={errors.fullName}\r\n                    />\r\n                    {/* </Grid>\r\n                <Grid item xs={6}> */}\r\n                    <Controls.Input\r\n                        label=\"Mobile\"\r\n                        name=\"mobile\"\r\n                        value={values.mobile}\r\n                        onChange={handleInputChage}\r\n                        error={errors.mobile}\r\n                    />\r\n                    <Controls.Input\r\n                        label=\"City\"\r\n                        name=\"city\"\r\n                        value={values.city}\r\n                        onChange={handleInputChage}\r\n                    />\r\n                    <Controls.Input\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        value={values.email}\r\n                        onChange={handleInputChage}\r\n                        error={errors.email}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Controls.RadioGroup\r\n                        name=\"gender\"\r\n                        label=\"Gender\"\r\n                        value={values.gender}\r\n                        onChange={handleInputChage}\r\n                        items={genderItems}\r\n                    />\r\n                    <Controls.Select\r\n                        name='departmentId'\r\n                        label='Department'\r\n                        value={values.departmentId}\r\n                        onChange={handleInputChage}\r\n                        options={employeeService.getDepartmentCollection()}\r\n                        error={errors.departmentId}\r\n                    />\r\n                    <Controls.DatePicker\r\n                        name='hireDate'\r\n                        label=\"Hire Date\"\r\n                        value={values.hireDate}\r\n                        onChange={handleInputChage}\r\n                    />\r\n                    <Controls.Checkbox\r\n                        name='isPermanent'\r\n                        label='Permanent Employee'\r\n                        value={values.isPermanent}\r\n                        onChange={handleInputChage}\r\n                    />\r\n                    <div>\r\n                        <Controls.Button\r\n                            type='submit'\r\n                            text='Submit'\r\n                        />\r\n                        <Controls.Button\r\n                            text='Reset'\r\n                            color=\"default\"\r\n                            onClick={resetForm}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n\r\n\r\n            </Grid>\r\n        </Form>\r\n    )\r\n}\r\nexport default EmployeeForm;","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Pages\\Employees\\Employee.js",["100"],"import React, { useState } from 'react'\r\nimport { makeStyles, Paper, TableBody, TableRow, TableCell, Toolbar, InputAdornment } from '@material-ui/core';\r\n\r\nimport EditOutlinedIcon from '@material-ui/icons/Edit'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport EmployeeForm from './EmployeeForm'\r\nimport PageHeader from '../../PageHeader'\r\nimport useTable from '../../controls/useTable'\r\nimport * as employeeService from '../../../Services/employeeService'\r\nimport Controls from '../../controls/Controls'\r\nimport { Search, Add } from '@material-ui/icons'\r\nimport Popup from '../../controls/Popup'\r\nimport Notification from '../../controls/Notification'\r\nimport ConfirmDialog from '../../ConfirmDialog'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    PageContent: {\r\n        margin: theme.spacing(5),\r\n        padding: theme.spacing(3)\r\n    },\r\n    searchInput: {\r\n        width: '75%'\r\n    },\r\n    newButton: {\r\n        position: 'absolute',\r\n        right: '10px'\r\n    }\r\n}))\r\n\r\nconst headCells = [\r\n    { id: 'fullName', label: 'Employee Name' },\r\n    { id: 'email', label: 'Email Address(Personal)' },\r\n    { id: 'mobile', label: 'Mobile Number' },\r\n    { id: 'department', label: 'Department' },\r\n    { id: 'action', label: 'Actions', disableSorting: true }\r\n]\r\n\r\nconst Employee = props => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [recordForEdit, setRecordForEdit] = useState(null)\r\n    const [records, setRecords] = useState(employeeService.getAllEmployees())\r\n    const [filterFn, setFilterFn] = useState({ fn: items => { return items; } })\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [notify, setNotify] = useState({ isOpen: false, message: '', type: '' })\r\n    const [confirmDialog, setConfirmDialog] = useState({ isOpen: false, title: '', subTitle: '' })\r\n\r\n    const { TblContainer, TblHead, TblPagination, recordsAfterPagingAndSorting } = useTable(records, headCells, filterFn);\r\n\r\n    const handleSearchChange = e => {\r\n        let target = e.target\r\n        setFilterFn({\r\n            fn: items => {\r\n                if (target.value === '')\r\n                    return items;\r\n                else\r\n                    return items.filter(x => x.fullName.toLowerCase().includes(target.value))\r\n            }\r\n        })\r\n    }\r\n\r\n    const addOrEdit = (employee, resetForm) => {\r\n        if (employee.id == 0)\r\n            employeeService.insertEmployee(employee)\r\n        else\r\n            employeeService.updateEmployee(employee)\r\n        resetForm();\r\n        setRecordForEdit(null)\r\n        setOpenPopup(false)\r\n        setRecords(employeeService.getAllEmployees())\r\n        setNotify({\r\n            isOpen: true,\r\n            message: 'submitted Successfully',\r\n            type: 'success'\r\n        })\r\n    }\r\n\r\n    const onDelete = (id) => {\r\n        // if (window.confirm('Are you sure to delete this record?'))\r\n        setConfirmDialog({\r\n            ...confirmDialog,\r\n            isOpen: false\r\n        })\r\n        employeeService.deleteEmployee(id)\r\n        setRecords(employeeService.getAllEmployees())\r\n        setNotify({\r\n            isOpen: true,\r\n            message: 'Deleted Successfully',\r\n            type: 'error'\r\n        })\r\n    }\r\n\r\n    const openInPopup = item => {\r\n        setRecordForEdit(item)\r\n        setOpenPopup(true)\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <PageHeader\r\n                title=\"New Employee\"\r\n                subtitle=\"Form design with validation\"\r\n                icon={<PeopleIcon fontSize=\"large\" />}\r\n            />\r\n            <Paper className={classes.PageContent}>\r\n\r\n                <Toolbar >\r\n                    <Controls.Input\r\n                        label=\"Search Employee\"\r\n                        className={classes.searchInput}\r\n                        InputProps={{\r\n                            startAdornment: (<InputAdornment position='start'>\r\n                                <Search />\r\n                            </InputAdornment>)\r\n                        }}\r\n                        onChange={handleSearchChange}\r\n                    />\r\n                    <Controls.Button\r\n                        text=\"Add New\"\r\n                        variant=\"outlined\"\r\n                        startIcon={<Add />}\r\n                        className={classes.newButton}\r\n                        onClick={() => { setOpenPopup(true); setRecordForEdit(null) }}\r\n                    />\r\n                </Toolbar>\r\n                <TblContainer>\r\n                    <TblHead />\r\n                    <TableBody>\r\n                        {\r\n                            recordsAfterPagingAndSorting().map(item => (\r\n                                <TableRow key={item.id}>\r\n                                    <TableCell> {item.fullName} </TableCell>\r\n                                    <TableCell> {item.email} </TableCell>\r\n                                    <TableCell> {item.mobile} </TableCell>\r\n                                    <TableCell> {item.department} </TableCell>\r\n                                    <TableCell>\r\n                                        <Controls.ActionButton\r\n                                            color='primary'\r\n                                            onClick={() => { openInPopup(item) }}>\r\n                                            <EditOutlinedIcon fontSize='small' />\r\n                                        </Controls.ActionButton>\r\n                                        <Controls.ActionButton\r\n                                            color='secondary'\r\n                                            onClick={() => {\r\n                                                setConfirmDialog({\r\n                                                    isOpen: true,\r\n                                                    title: 'Are you sure to delete this record?',\r\n                                                    subTitle: \"You can't undo this operation\",\r\n                                                    onConfirm: () => { onDelete(item.id) }\r\n                                                })\r\n                                            }}>\r\n                                            <CloseIcon fontSize='small' />\r\n                                        </Controls.ActionButton>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))\r\n                        }\r\n                    </TableBody>\r\n                    <TblPagination />\r\n                </TblContainer>\r\n            </Paper>\r\n            <Popup\r\n                title=\"Employee Form\"\r\n                openPopup={openPopup}\r\n                setOpenPopup={setOpenPopup}\r\n            >\r\n                <EmployeeForm\r\n                    addOrEdit={addOrEdit}\r\n                    recordForEdit={recordForEdit}\r\n                />\r\n            </Popup>\r\n            <Notification\r\n                notify={notify}\r\n                setNotify={setNotify}\r\n            />\r\n            <ConfirmDialog\r\n                confirmDialog={confirmDialog}\r\n                setConfirmDialog={setConfirmDialog}\r\n            />\r\n        </>\r\n    )\r\n}\r\nexport default Employee;","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\SideMenu.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\Pages\\Employees\\useForm.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Input.js",[],["101","102"],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Controls.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\RadioGroup.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Select.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Services\\employeeService.js",["103","104"],"import { keys } from \"@material-ui/core/styles/createBreakpoints\";\r\n\r\nconst KEYS ={\r\n    employees:'employees',\r\n    employeeId :'employeeId'\r\n}\r\n\r\nexport const getDepartmentCollection =()=>([\r\n    {id:'1',title:'Development'},\r\n    {id:'2',title:'Marketing'},\r\n    {id:'3',title:'Accounting'},\r\n    {id:'4',title:'HR'},\r\n    {id:'5',title:'Delivery'},\r\n    ])\r\n\r\nexport function insertEmployee(data){\r\n    let employees = getAllEmployees();\r\n    employees.push(data)\r\n    data['id'] = generateEmployeeId();\r\n    localStorage.setItem(KEYS.employees,JSON.stringify(employees))\r\n}\r\n\r\nexport function updateEmployee(data){\r\n    let employees = getAllEmployees();\r\n    let recordIndex = employees.findIndex(x=> x.id === data.id)\r\n    employees[recordIndex] = {...data}\r\n    localStorage.setItem(KEYS.employees,JSON.stringify(employees))\r\n}\r\n\r\nexport function deleteEmployee(id){\r\n    let employees = getAllEmployees()\r\n    employees = employees.filter(x => x.id != id)\r\n    localStorage.setItem(KEYS.employees,JSON.stringify(employees))\r\n}\r\n\r\nexport function generateEmployeeId(){\r\n    if(localStorage.getItem(KEYS.employeeId) === null)\r\n    localStorage.setItem(KEYS.employeeId,'0')\r\n    var id = parseInt(localStorage.getItem(KEYS.employeeId))\r\n    localStorage.setItem(KEYS.employeeId,(++id).toString())\r\n    return id;\r\n}\r\n\r\nexport function getAllEmployees(){\r\n    if(localStorage.getItem(KEYS.employees) === null)\r\n    localStorage.setItem(KEYS.employees,JSON.stringify([]))\r\n    let employees = JSON.parse(localStorage.getItem(KEYS.employees))\r\n    // map departmentID to get department title\r\n    let departments = getDepartmentCollection();\r\n    return employees.map(x=> ({\r\n        ...x,\r\n        department: departments[x.departmentId -1].title\r\n    }))\r\n}","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Checkbox.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\DatePicker.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Button.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\useTable.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Popup.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\ActionButton.js",["105"],"import { makeStyles,Button } from '@material-ui/core'\r\nimport React, { useState } from 'react'\r\n\r\nconst useStyles = makeStyles(theme =>({\r\n    root:{\r\n        minWidth:0,\r\n        margin:theme.spacing(0.5)\r\n    },\r\n    secondary:{\r\n        backgroundColor:theme.palette.secondary.light,\r\n        '& .MuiButton-label' :{\r\n            color:theme.palette.secondary.main,\r\n        }\r\n    },\r\n    primary:{\r\n        backgroundColor:theme.palette.primary.light,\r\n        '& .MuiButton-label' :{\r\n            color:theme.palette.primary.main,\r\n        }\r\n    }\r\n}))\r\n\r\nconst ActionButton = props =>{\r\n\r\n    const {color,children,onClick} = props\r\n\r\n    const classes = useStyles()\r\n\r\n    return(\r\n        <Button\r\n        className={`${classes.root} ${classes[color]}`}\r\n        onClick={onClick}\r\n        >\r\n            {children}\r\n        </Button>\r\n    )\r\n}\r\nexport default ActionButton;","D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\controls\\Notification.js",[],"D:\\Lucy\\web\\material-app\\src\\Test1\\Components\\ConfirmDialog.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":34,"column":8,"nodeType":"112","endLine":34,"endColumn":21},{"ruleId":"110","severity":1,"message":"113","line":34,"column":8,"nodeType":"112","endLine":34,"endColumn":21,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":65,"column":25,"nodeType":"117","messageId":"118","endLine":65,"endColumn":27},{"ruleId":"106","replacedBy":"119"},{"ruleId":"108","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":1,"column":10,"nodeType":"112","messageId":"123","endLine":1,"endColumn":14},{"ruleId":"115","severity":1,"message":"124","line":32,"column":44,"nodeType":"117","messageId":"118","endLine":32,"endColumn":46},{"ruleId":"121","severity":1,"message":"125","line":2,"column":17,"nodeType":"112","messageId":"123","endLine":2,"endColumn":25},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"react-hooks/exhaustive-deps","React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","Identifier","React Hook useEffect has missing dependencies: 'recordForEdit' and 'setValues'. Either include them or remove the dependency array.",["128"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["126"],["127"],"no-unused-vars","'keys' is defined but never used.","unusedVar","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"129","fix":"130"},"Update the dependencies array to be: [recordForEdit, setValues]",{"range":"131","text":"132"},[810,823],"[recordForEdit, setValues]"]